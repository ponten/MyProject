CREATE OR REPLACE PROCEDURE SAJET.SJ_RC_PACK_CARTON_RCTRAVEL(
    I_CARTON IN VARCHAR2,
    I_EMPID IN VARCHAR2,
    O_RES OUT VARCHAR2,
    O_REMAINDER_RC_NO OUT VARCHAR2,
    O_REMAINDER_QTY OUT NUMBER) IS

    T_TEMP_NUM NUMBER;
    T_REMAINDER NUMBER;
    T_QTY NUMBER;
    T_RC_NO_SPLIT SAJET.G_RC_STATUS.RC_NO%TYPE;
    T_NEW_RC_NO SAJET.G_RC_STATUS.RC_NO%TYPE;
    T_PROCESS_ID SAJET.G_RC_STATUS.PROCESS_ID%TYPE;
    T_TRAVEL_ID SAJET.G_RC_STATUS.TRAVEL_ID%TYPE;
    T_SOURCE_TRAVEL_ID SAJET.G_RC_STATUS.TRAVEL_ID%TYPE;
    T_WORKTIME SAJET.G_RC_STATUS.WORKTIME%TYPE;

    T_ROUTE_ID NUMBER;
    T_NODE SAJET.G_RC_STATUS.NODE_ID%TYPE;
    T_PROCESS SAJET.G_RC_STATUS.PROCESS_ID%TYPE;
    T_NEXT_NODE SAJET.G_RC_STATUS.NODE_ID%TYPE;
    T_NEXT_PROCESS SAJET.G_RC_STATUS.PROCESS_ID%TYPE;
    T_SHEET SAJET.SYS_RC_PROCESS_SHEET.SHEET_NAME%TYPE;
    T_STATUS NUMBER;
    T_WO_FINISH VARCHAR2(5);

BEGIN
    O_RES := 'OK';

    -- 檢查 CARTON_NO 是否存在
    SELECT COUNT(T1.CARTON_NO) INTO T_TEMP_NUM FROM SAJET.G_RC_CARTON T1 LEFT JOIN SAJET.G_PACK_CARTON T2 ON T1.CARTON_NO = T2.CARTON_NO WHERE T1.CARTON_NO = I_CARTON;
    IF T_TEMP_NUM = 0 THEN
        O_RES := 'CARTON_NO does not exist.';
        RETURN;
    END IF;

    -- 找出無法完全包箱的 RC
    SELECT COUNT(T1.RC_NO) INTO T_TEMP_NUM FROM SAJET.G_RC_CARTON T1 LEFT JOIN SAJET.G_RC_STATUS T2 ON T1.RC_NO = T2.RC_NO WHERE T1.CARTON_NO = I_CARTON AND T1.QTY <> T2.CURRENT_QTY;
    IF T_TEMP_NUM > 1 THEN
        O_RES := 'Error';
        RETURN;
    ELSIF T_TEMP_NUM = 1 THEN
        SELECT T1.RC_NO, T1.QTY, (T2.CURRENT_QTY - T1.QTY) REMAINDER INTO T_RC_NO_SPLIT, T_QTY, T_REMAINDER FROM SAJET.G_RC_CARTON T1 LEFT JOIN SAJET.G_RC_STATUS T2 ON T1.RC_NO = T2.RC_NO WHERE T1.CARTON_NO = I_CARTON AND T1.QTY <> T2.CURRENT_QTY;
    ELSE
        T_RC_NO_SPLIT := NULL;
    END IF;

    -- 拆批
    IF T_RC_NO_SPLIT IS NOT NULL THEN
        -- 取得 PROCESS_ID, WORKTIME, SOURCE_TRAVEL_ID, TRAVEL_ID
        SELECT T1.PROCESS_ID, T1.WORKTIME, T1.TRAVEL_ID INTO T_PROCESS_ID, T_WORKTIME, T_SOURCE_TRAVEL_ID FROM SAJET.G_RC_STATUS T1 WHERE T1.RC_NO = T_RC_NO_SPLIT;
        T_TRAVEL_ID := SUBSTR(REPLACE(TO_CHAR(SYSTIMESTAMP, 'yyyyMMddhhmmssxff'), '.', ''), 1, 15);

        -- 取得新 RC
        SELECT (MAX(TO_NUMBER(SUBSTR(T1.RC_NO, 21, 6))) + 1) NEXT_NUM INTO T_TEMP_NUM FROM SAJET.G_RC_STATUS T1 WHERE T1.RC_NO LIKE SUBSTR(T_RC_NO_SPLIT, 1, 20) || '%';
        T_NEW_RC_NO := SUBSTR(T_RC_NO_SPLIT, 1, 20) || LPAD(TO_CHAR(T_TEMP_NUM), 6, '0');

        -- 寫入 G_RC_SPLIT
        INSERT INTO SAJET.G_RC_SPLIT (RC_NO, RC_QTY, SOURCE_RC_NO, SOURCE_RC_QTY, TRAVEL_ID, PROCESS_ID, UPDATE_USERID, UPDATE_TIME)
            VALUES (T_RC_NO_SPLIT, T_QTY, T_RC_NO_SPLIT, (T_QTY + T_REMAINDER), T_TRAVEL_ID, T_PROCESS_ID, I_EMPID, SYSDATE);
        INSERT INTO SAJET.G_RC_SPLIT (RC_NO, RC_QTY, SOURCE_RC_NO, SOURCE_RC_QTY, TRAVEL_ID, PROCESS_ID, UPDATE_USERID, UPDATE_TIME)
            VALUES (T_NEW_RC_NO, T_REMAINDER, T_RC_NO_SPLIT, (T_QTY + T_REMAINDER), T_TRAVEL_ID, T_PROCESS_ID, I_EMPID, SYSDATE);

        -- 更新 G_RC_STATUS
        INSERT INTO SAJET.G_RC_STATUS (WORK_ORDER, RC_NO, PART_ID, VERSION, ROUTE_ID , FACTORY_ID, PDLINE_ID, STAGE_ID, NODE_ID, PROCESS_ID, SHEET_NAME, TERMINAL_ID, TRAVEL_ID, NEXT_NODE, NEXT_PROCESS, CURRENT_STATUS, CURRENT_QTY, IN_PROCESS_EMPID, IN_PROCESS_TIME, WIP_IN_QTY, WIP_IN_EMPID, WIP_IN_MEMO, WIP_IN_TIME, WIP_OUT_GOOD_QTY, WIP_OUT_SCRAP_QTY, WIP_OUT_EMPID, WIP_OUT_MEMO, WIP_OUT_TIME, OUT_PROCESS_EMPID, OUT_PROCESS_TIME, HAVE_SN, PRIORITY_LEVEL, UPDATE_USERID, UPDATE_TIME, CREATE_TIME, BATCH_ID, EMP_ID, BONUS_QTY, WORKTIME, INITIAL_QTY, RELEASE)
            SELECT T1.WORK_ORDER, T_NEW_RC_NO RC_NO, T1.PART_ID, T1.VERSION, T1.ROUTE_ID , T1.FACTORY_ID, T1.PDLINE_ID, T1.STAGE_ID, T1.NODE_ID, T1.PROCESS_ID, T1.SHEET_NAME, T1.TERMINAL_ID, T_TRAVEL_ID TRAVEL_ID, T1.NEXT_NODE, T1.NEXT_PROCESS, T1.CURRENT_STATUS, T_REMAINDER CURRENT_QTY, T1.IN_PROCESS_EMPID, T1.IN_PROCESS_TIME, T1.WIP_IN_QTY, T1.WIP_IN_EMPID, T1.WIP_IN_MEMO, T1.WIP_IN_TIME, T1.WIP_OUT_GOOD_QTY, T1.WIP_OUT_SCRAP_QTY, T1.WIP_OUT_EMPID, T1.WIP_OUT_MEMO, T1.WIP_OUT_TIME, T1.OUT_PROCESS_EMPID, T1.OUT_PROCESS_TIME, T1.HAVE_SN, T1.PRIORITY_LEVEL, I_EMPID UPDATE_USERID, SYSDATE UPDATE_TIME, SYSDATE CREATE_TIME, T1.BATCH_ID, I_EMPID EMP_ID, 0 BONUS_QTY, T_WORKTIME WORKTIME, T_REMAINDER INITIAL_QTY, 'Y' RELEASE
                FROM SAJET.G_RC_STATUS T1
                WHERE T1.RC_NO = T_RC_NO_SPLIT AND T1.TRAVEL_ID = T_SOURCE_TRAVEL_ID;
        UPDATE SAJET.G_RC_STATUS
            SET CURRENT_QTY = T_QTY ,TRAVEL_ID = T_TRAVEL_ID, UPDATE_USERID = I_EMPID, UPDATE_TIME = SYSDATE, BONUS_QTY = 0, WORKTIME = T_WORKTIME, RELEASE = 'Y'
            WHERE RC_NO = T_RC_NO_SPLIT AND TRAVEL_ID = T_SOURCE_TRAVEL_ID;

        O_REMAINDER_RC_NO := T_NEW_RC_NO;
        O_REMAINDER_QTY := T_REMAINDER;
    END IF;

    -- RC 過站
    DECLARE
    CURSOR C_RC_DATA IS
        SELECT T1.WORK_ORDER, T1.RC_NO, T1.QTY FROM SAJET.G_RC_CARTON T1 WHERE T1.CARTON_NO = I_CARTON ORDER BY T1.CREATECARTON_TIME;
    BEGIN
        T_TRAVEL_ID := SUBSTR(REPLACE(TO_CHAR(SYSTIMESTAMP, 'yyyyMMddhhmmssxff'), '.', ''), 1, 15);

        FOR C_RC IN C_RC_DATA
        LOOP
            -- Step.1
            UPDATE SAJET.G_RC_STATUS
                SET WIP_IN_QTY = C_RC.QTY, WIP_IN_EMPID = I_EMPID, WIP_IN_MEMO = '', WIP_IN_TIME = SYSDATE, WIP_OUT_GOOD_QTY  = C_RC.QTY, WIP_OUT_SCRAP_QTY = 0, WIP_OUT_EMPID = I_EMPID, WIP_OUT_MEMO = '', WIP_OUT_TIME = SYSDATE, CURRENT_QTY = C_RC.QTY, CURRENT_STATUS = DECODE(C_RC.QTY, 0, 8, CURRENT_STATUS), UPDATE_TIME = SYSDATE, UPDATE_USERID = I_EMPID
                WHERE RC_NO = C_RC.RC_NO;

            -- Step.2
            INSERT INTO SAJET.G_RC_TRAVEL (WORK_ORDER, RC_NO, PART_ID, VERSION, ROUTE_ID, FACTORY_ID, PDLINE_ID, STAGE_ID, NODE_ID, PROCESS_ID, TERMINAL_ID, TRAVEL_ID, CURRENT_QTY, IN_PROCESS_EMPID, IN_PROCESS_TIME, WIP_PROCESS, WIP_IN_QTY, WIP_IN_EMPID, WIP_IN_MEMO, WIP_IN_TIME, WIP_OUT_GOOD_QTY, WIP_OUT_SCRAP_QTY, WIP_OUT_EMPID, WIP_OUT_MEMO, WIP_OUT_TIME, OUT_PROCESS_EMPID, OUT_PROCESS_TIME, HAVE_SN, UPDATE_USERID, UPDATE_TIME, CREATE_TIME)
                SELECT WORK_ORDER, RC_NO, PART_ID, VERSION, ROUTE_ID, FACTORY_ID, PDLINE_ID, STAGE_ID, NODE_ID, PROCESS_ID, TERMINAL_ID, TRAVEL_ID, CURRENT_QTY, IN_PROCESS_EMPID, IN_PROCESS_TIME, NEXT_PROCESS, WIP_IN_QTY, WIP_IN_EMPID, WIP_IN_MEMO, WIP_IN_TIME, WIP_OUT_GOOD_QTY, WIP_OUT_SCRAP_QTY, WIP_OUT_EMPID, WIP_OUT_MEMO, WIP_OUT_TIME, OUT_PROCESS_EMPID, OUT_PROCESS_TIME, HAVE_SN, UPDATE_USERID, UPDATE_TIME, CREATE_TIME
                    FROM SAJET.G_RC_STATUS
                    WHERE RC_NO = C_RC.RC_NO;

            -- STEP.3 取得下一站資料
            SAJET.SJ_OUTPUT_GET_NODE(C_RC.RC_NO, 'RC', 'NEXT', T_ROUTE_ID, T_NODE, T_PROCESS, T_NEXT_NODE, T_NEXT_PROCESS, T_SHEET, T_STATUS, O_RES);
            IF O_RES <> 'OK' THEN
                ROLLBACK;
                RETURN;
            END IF;

            -- STEP.4 更新工單產出數量
            IF T_STATUS = 9 THEN
                UPDATE SAJET.G_WO_BASE
                    SET OUTPUT_QTY = OUTPUT_QTY + C_RC.QTY, UPDATE_TIME = SYSDATE, UPDATE_USERID = I_EMPID
                    WHERE WORK_ORDER = C_RC.WORK_ORDER;
                INSERT INTO SAJET.G_HT_WO_BASE
                    SELECT * FROM SAJET.G_WO_BASE WHERE WORK_ORDER = C_RC.WORK_ORDER;
            END IF;

            --STEP.5 更新下一站資料
            UPDATE SAJET.G_RC_STATUS
                SET CURRENT_STATUS = T_STATUS, TRAVEL_ID = T_TRAVEL_ID, NODE_ID = T_NODE, PROCESS_ID = T_PROCESS, SHEET_NAME = T_SHEET, NEXT_NODE = T_NEXT_NODE, NEXT_PROCESS = T_NEXT_PROCESS, ROUTE_ID = T_ROUTE_ID, UPDATE_USERID = I_EMPID, UPDATE_TIME = SYSDATE, IN_PROCESS_EMPID = NULL, IN_PROCESS_TIME = NULL, WIP_IN_QTY = NULL, WIP_IN_EMPID = NULL, WIP_IN_MEMO = NULL, WIP_IN_TIME = NULL, WIP_OUT_GOOD_QTY = NULL, WIP_OUT_SCRAP_QTY = NULL, WIP_OUT_EMPID = NULL, WIP_OUT_MEMO = NULL, WIP_OUT_TIME = NULL, OUT_PROCESS_EMPID = NULL, OUT_PROCESS_TIME = NULL, BATCH_ID = NULL
                WHERE RC_NO = C_RC.RC_NO;

            --STEP.6 檢查工單是否完成
            T_WO_FINISH := SAJET.F_CHK_WO_COMPELETE(C_RC.WORK_ORDER);
            IF T_WO_FINISH = 'Y' THEN
                UPDATE SAJET.G_WO_BASE
                    SET WO_STATUS = '6', UPDATE_TIME = SYSDATE, UPDATE_USERID = I_EMPID
                    WHERE WORK_ORDER = C_RC.WORK_ORDER;
                INSERT INTO SAJET.G_HT_WO_BASE
                    SELECT * FROM SAJET.G_WO_BASE WHERE WORK_ORDER = C_RC.WORK_ORDER;
            END IF;
        END LOOP;
    END;

EXCEPTION WHEN OTHERS THEN
    O_RES := SQLERRM;
    ROLLBACK;
END;